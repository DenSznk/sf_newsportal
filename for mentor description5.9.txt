>>> from newsportal.models import *
--------------------------
Создать двух пользователей (с помощью метода User.objects.create_user('username')).
>>> User.objects.create_user('User1')
>>> User.objects.create_user('User2')
--------------------------

Создать два объекта модели Author, связанные с пользователями.
>>> author1 = Author.objects.create(user_id = 1)
>>> author2 = Author.objects.create(user_id = 2)
--------------------------

Добавить 4 категории в модель Category.
>>> Category.objects.create(category_name = 'Sport')

>>> Category.objects.create(category_name = 'Politics')

>>> Category.objects.create(category_name = 'Music')

>>> Category.objects.create(category_name = 'Animals')

--------------------------

Добавить 2 статьи и 1 новость.
Post.objects.create(author_id = 1, type = 'NE', header_news =
'Header for post1', post_text = 'Some text for post1')

Post.objects.create(author_id = 1, type = 'AR', header_news =
'Header for post2', post_text = 'Some text for post2')

Post.objects.create(author_id = 1, type = 'NE', header_news =
'Header for post3', post_text = 'Some text for post3')

Post.objects.create(author_id = 1, type = 'AR', header_news =
'Header for post4', post_text = 'Some text for post4')
--------------------------

Присвоить им категории (как минимум в одной статье/новости должно быть не
меньше 2 категорий).

post1.category.add(Category.objects.get(id=1))
post1.category.add(Category.objects.get(id=2))
post2.category.add(Category.objects.get(id=3))
post3.category.add(Category.objects.get(id=4))
post3.category.add(Category.objects.get(id=1))
post4.category.add(Category.objects.get(id=2))
----------------------------

Создать как минимум 4 комментария к разным объектам модели Post
(в каждом объекте должен быть как минимум один комментарий).

>>> comment1 = Comment.objects.create(user_one_to_many = user1,
post_one_to_many = post1, comment_text = 'Comment1 text')

>>> comment2 = Comment.objects.create(user_one_to_many = user1,
post_one_to_many = post2, comment_text = 'Comment1 user1 post2')

>>> comment3 = Comment.objects.create(user_one_to_many = user2,
post_one_to_many = post2, comment_text = 'Comment3 user2 post2')

>>> comment4 = Comment.objects.create(user_one_to_many = user2,
post_one_to_many = post1, comment_text = 'Comment4 user2 post1')
 ----------------------

 Применяя функции like() и dislike() к статьям/новостям и комментариям,
 скорректировать рейтинги этих объектов.

 >>> Post.objects.get(id=1).add_like()
 >>> Post.objects.get(id=2).add_like()
 >>> Post.objects.get(id=1).add_dislike()
 >>> Post.objects.get(id=2).add_dislike()

 >>> Comment.objects.get(id=1).add_like()
 >>> Comment.objects.get(id=2).add_like()
 >>> Comment.objects.get(id=1).add_dislike()
 >>> Comment.objects.get(id=2).add_dislike()
------------------------


Обновить рейтинги пользователей.
Author.objects.get(user_id=1).update_rating()
Author.objects.get(user_id=2).update_rating()

-------------------------

Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая
поля первого объекта).

 >>> Author.objects.all().order_by('-rating').values('user', 'rating')[0]

------------------------------

Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей
статьи, основываясь на лайках/дислайках к этой статье.

 Post.objects.all().order_by('-rating').values('author_id__username', 'post_text',
 'rating', 'header_news', 'date_time_auto')[0]
--------------------------

Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

 Comment.objects.all().order_by('post_one_to_many').values('comment_date',
 'user_one_to_many', 'comment_rating', 'comment_text')
